daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
rs <- read_delim("~/Desktop/tension.csv", delim = ';' ) %>%
gather(key, value, -date)%>%
mutate(value = round(value, na.rm = T)) %>%
filter(key != "heart")
dates <- c(unique(date(rs$date)), max(date(rs$date))+1)
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
rs <- read_delim("~/Desktop/tension.csv", delim = ';' ) %>%
gather(key, value, -date)%>%
mutate(value = round(value)) %>%
filter(key != "heart")
dates <- c(unique(date(rs$date)), max(date(rs$date))+1)
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
dates <- c(unique(date(rs$date)), max(date(rs$date))+1, min(date(rs$date))-1)
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
night
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00"))))
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
day
night
day = sort(as_datetime(paste(dates[-1], c(23:00:00"))))
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("7:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("23:00:00"))))
)
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("7:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("23:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
daynight <- tibble(
night = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
day = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
daynight <- tibble(
day = sort(as_datetime(paste(dates[-length(dates)], c("7:00:00")))),
night = sort(as_datetime(paste(dates[-1], c("23:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
dates <- sort(c(unique(date(rs$date)), max(date(rs$date))+1, min(date(rs$date))-1))
daynight <- tibble(
day = sort(as_datetime(paste(dates[-length(dates)], c("7:00:00")))),
night = sort(as_datetime(paste(dates[-1], c("23:00:00"))))
)
daynight <- tibble(
day = sort(as_datetime(paste(dates[-length(dates)], c("23:00:00")))),
night = sort(as_datetime(paste(dates[-1], c("7:00:00"))))
)
ggplot() +
geom_rect(data = daynight, aes(xmin=day, xmax=night, ymin=50, ymax=Inf), alpha = 0.1) +
geom_line(data = rs, aes(date, value, lty = key)) +
geom_point(data = rs, aes(date, value, lty = key)) +
geom_text(data = rs, aes(label = value, x = date, y = value+2)) +
geom_hline(yintercept = 140, colour = "red", lty=3) +
geom_hline(yintercept = 90, colour = "red", lty=2) +
theme_classic()
library(tidyverse)
rs <- read_csv("~/Desktop/LBIR1151-B-Quiz certificatif cours 1 - 10 minutes - 21 février 2021-notes.csv")
dates <- substr(rs$`Commencé le`, 0, 2)
hist(dates)
dates <- as.numeric(substr(rs$`Commencé le`, 0, 2))
hist(dates)
dens(dates)
density(dates)
hist(dates, fill='lightgrey')
hist(dates)
shiny::runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp()
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
runApp('Dropbox/science/projects/biogo/2021_biogo/biogo_2021')
library(tidyverse)
rs <- read_xls("~/Desktop/Stats_Exam_Par_AnEt_BIR11BA+BIR1BA_2020.xls")
library(readxl)
rs <- read_xls("~/Desktop/Stats_Exam_Par_AnEt_BIR11BA+BIR1BA_2020.xls")
library(tidyverse)
library(readxl)
rs <- read_xls("~/Desktop/Stats_Exam_Par_AnEt_BIR11BA+BIR1BA_2020.xls")
bac1 <- rs %>%
filter(AnEt == "BIR11BA")
View(bac1)
bac1 <- rs %>%
filter(AnEt == "BIR11BA" & `Inscr exam` > 100)
View(bac1)
bac1 <- rs %>%
filter(AnEt == "BIR11BA" & `Inscr exam` > 100) %>%
mutate(cours = `Sigle cours`) %>%
mutate(moyenne = `Moy notes`) %>%
mutate(ec = `Ecart type notes`)
ggplot(bac1, aes(cours, moyenne)) %>%
geom_point() +
geom_errorbar(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)
ggplot(bac1, aes(cours, moyenne)) +
geom_point() +
geom_errorbar(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)
ggplot(data = bac1, aes(cours, moyenne)) +
geom_point() +
geom_errorbar(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)
ggplot(data = bac1, aes(cours, moyenne)) +
geom_point()
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point()
bac1 <- rs %>%
filter(AnEt == "BIR11BA" & `Inscr exam` > 100) %>%
mutate(cours = `Sigle cours`) %>%
mutate(moyenne = as.numeric(`Moy notes`)) %>%
mutate(ec = `Ecart type notes`)
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point()
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec))
bac1 <- rs %>%
filter(AnEt == "BIR11BA" & `Inscr exam` > 100) %>%
mutate(cours = `Sigle cours`) %>%
mutate(moyenne = as.numeric(`Moy notes`)) %>%
mutate(ec = as.numeric(`Ecart type notes`))
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec))
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_bw()
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic()
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45))
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0))
bac1 %>%
ggplot(aes(cours, moyenne)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
bac1 %>%
arrange(Quadri) %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5))
bac1 %>%
arrange(Quadri)
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
facet_wrap(~Quadr)
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
facet_wrap(~Quadri)
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
ylim(c(0,20))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
ylim(c(0,20))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2)
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
ylim(c(0,20))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point()
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec))
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec)) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), length=1) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point() +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), size=1) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point(size=1) +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), size=1) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point(size=2) +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), size=1) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
bac1 %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point(size=2) +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), size=1, width=0) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
View(rs)
bac <- rs %>%
filter(AnEt == "BIR1BA" & `Inscr exam` > 100) %>%
mutate(cours = `Sigle cours`) %>%
mutate(moyenne = as.numeric(`Moy notes`)) %>%
mutate(ec = as.numeric(`Ecart type notes`))
View(bac)
BA2Q1 <- c("LBIR1211",  "LBIR1212",  "LBIR1250",  "LBIR1260",  "LBIR1270", "LCHM1241C")
BA2Q2 <- c("LBIR1221",  "LCHM1211A",  "LBIR1251",  "LBIR1252",  "LBIR1230", "LANGL1882", "LBIR1271")
BA2 <- c(BA2Q1, BA2Q2)
bac <- rs %>%
mutate(cours = `Sigle cours`) %>%
filter(AnEt == "BIR1BA" & cours %in% BA2) %>%
mutate(moyenne = as.numeric(`Moy notes`)) %>%
mutate(ec = as.numeric(`Ecart type notes`))
View(bac)
bac %>%
ggplot(aes(cours, moyenne, col = Quadri)) +
geom_point(size=2) +
geom_errorbar(aes(x = cours, ymin = moyenne - ec, ymax = moyenne + ec), size=1, width=0) +
ylim(c(0,21))+
theme_classic() +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.5)) +
geom_hline(yintercept = 10, lty=2) +
facet_wrap(~Quadri, scales = "free")
shiny::runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
#define the datasets
lprec <- make.lp(0, veg_min)
#define the datasets
lprec <- make.lp(0, veg_min)
# Total surface, in m2
surf_tot <- 500
# min surface for one parcel, in m2
surf_min <- 10
# Max cost
cost_max <- 1000
# number of different vegetables
veg_min <- length(unique(veg$vegetable))
#define the datasets
lprec <- make.lp(0, veg_min)
lp.control(lprec, sense="max")
set.objfn(lprec, veg$yield*price) # optimize on production
set.objfn(lprec, veg$yield*veg$price)
# Total surface contrains
add.constraint(lprec, rep(1, veg_min), "=", surf_tot)
# price constrains
add.constraint(lprec, veg$cost, "<=", cost_max)
lprec
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
### PARAMETERS
# Vegetable data
veg <- read_xlsx("www/vegetable_data.xlsx")
# Total surface, in m2
surf_tot <- 500
# number of different vegetables
veg_min <- length(unique(veg$vegetable))
# min surface for one parcel, in m2
surf_min <- 10
surf_max <- (surf_tot / veg_min ) * 1.3
if(surf_min > surf_max) surf_min <- surf_max
# Max cost
cost_max <- 1400
if(cost_max < sum(surf_min * veg$price)){
cost_max <- sum(surf_min * veg$price)
}
#define the datasets
lprec <- make.lp(0, veg_min)
lp.control(lprec, sense="max")
# Objective function
set.objfn(lprec, veg$yield * veg$price) # optimize on price
# Total surface contrains
add.constraint(lprec, rep(1, veg_min), "<=", surf_tot)
# price constrains
add.constraint(lprec, veg$cost, "<=", cost_max)
# Total surface contrains
add.constraint(lprec, rep(1, veg_min), "=", surf_tot)
#define the datasets
lprec <- make.lp(0, veg_min)
lp.control(lprec, sense="max")
# Objective function
set.objfn(lprec, veg$yield * veg$price) # optimize on price
#set.objfn(lprec, veg$yield) # optimize on production
#set.objfn(lprec, veg$calorie) # optimize on calories
#lp.control(lprec, sense="min")
#set.objfn(lprec, veg$water) # optimize on water (minimal)
# Total surface contrains
add.constraint(lprec, rep(1, veg_min), "=", surf_tot)
lprec
# Individual production constrain. Same production for each veg
for(i in c(2:veg_min)){
inds <- rep(0, veg_min)
inds[i] <- -1
inds[1] <- 1
inds <- inds * veg$yield
add.constraint(lprec, inds, "=", 0)
}
lprec
solve(lprec)
round(get.variables(lprec))
lprec <- make.lp(0, veg_min)
lp.control(lprec, sense="max")
# Objective function
set.objfn(lprec, veg$yield * veg$price) # optimize on price
#set.objfn(lprec, veg$yield) # optimize on production
#set.objfn(lprec, veg$calorie) # optimize on calories
#lp.control(lprec, sense="min")
#set.objfn(lprec, veg$water) # optimize on water (minimal)
# Total surface contrains
add.constraint(lprec, rep(1, veg_min), "=", surf_tot)
# price constrains
add.constraint(lprec, veg$cost, "<=", cost_max)
# Individual surface contrains
for(i in c(1:veg_min)){
inds <- rep(0, veg_min)
inds[i] <- 1
add.constraint(lprec, inds, ">=", surf_min)
add.constraint(lprec, inds, "<=", surf_max)
}
# Individual production constrain. Same production for each veg
for(i in c(2:veg_min)){
inds <- rep(0, veg_min)
inds[i] <- -1
inds[1] <- 1
inds <- inds * veg$yield
add.constraint(lprec, inds, "=", 0)
}
lprec
solve(lprec)
round(get.variables(lprec))
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
runApp('Dropbox/science/projects/opti_maraich')
11000000*0.25 + 11000000*0.75*0.2
11*0.25 + 11*0.75*0.2
11*0.1 + 11*0.9*0.2
runApp('Dropbox/science/projects/opti_maraich')
library(tidyverse)
library(readxl)
library(lpSolveAPI)
# the aim of this script is to find the optimal repartition of
# vegetable in a market gardenning setup, based on different
# targets.
### PARAMETERS
# Vegetable data
veg <- read_xlsx("www/vegetable_data.xlsx")
View(veg)
shiny::runApp()
